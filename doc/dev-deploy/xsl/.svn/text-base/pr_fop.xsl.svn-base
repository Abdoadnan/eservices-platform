<?xml version='1.0'?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:fo="http://www.w3.org/1999/XSL/Format"
		xmlns:doc="http://nwalsh.com/xsl/documentation/1.0"
		exclude-result-prefixes="doc"
		version='1.0'>

  <!-- <xsl:import href="docbook.xsl"/> -->
  <xsl:import href="/usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl"/>

  <!-- titlepage customization  -->
  <xsl:include href="titlepage_cust_fo.xsl"/>

  <!-- Add other variable definitions here -->
<!--  <xsl:param name="use.extensions" select="1"/> only use this with saxon processor 
       when you want generation of callouts -->
  <xsl:attribute-set name="monospace.verbatim.properties" use-attribute-sets="verbatim.properties monospace.properties">
    <xsl:attribute name="font-size">9pt</xsl:attribute>
    <xsl:attribute name="text-align">start</xsl:attribute>
    <xsl:attribute name="wrap-option">no-wrap</xsl:attribute>
  </xsl:attribute-set>

  <xsl:attribute-set name="highlight.attribute-set" use-attribute-sets="normal.para.spacing">
    <xsl:attribute name="background-color">#E9E9E9</xsl:attribute>
    <xsl:attribute name="space-before.minimum">1.0em</xsl:attribute>
    <xsl:attribute name="space-before.optimum">1.2em</xsl:attribute>
    <xsl:attribute name="space-before.maximum">1.4em</xsl:attribute>
    <!--
	<xsl:attribute name="hyphenate">false</xsl:attribute>
	<xsl:attribute name="space-after.minimum">0.4em</xsl:attribute>
	<xsl:attribute name="space-after.optimum">0.6em</xsl:attribute>
	<xsl:attribute name="space-after.maximum">0.8em</xsl:attribute>
    -->
  </xsl:attribute-set>


  <xsl:param name="toc.section.depth">2</xsl:param>
  <xsl:param name="section.autolabel" select="1"/>
  <xsl:param name="double.sided" select="0"/>
  <xsl:param name="paper.type" select="'A4'"/>
  <xsl:param name="page.margin.inner" select="'3cm'"/>
  <xsl:param name="page.margin.outer" select="'2cm'"/>
  <xsl:param name="title.margin.left" select="'-1pc'"/>
  <xsl:param name="footers.on.blank.pages" select="0"/>
  <xsl:param name="appendix.autolabel" select="'A'"/>
  <xsl:param name="bibliography.style">iso690</xsl:param>
  <!--<xsl:param name="bibliography.style">normal</xsl:param>-->
  <!--
      <xsl:param name="column.count.titlepage" select="0"/>
      <xsl:param name="draft.mode" select="'yes'"/>
      <xsl:param name="draft.watermark.image">http://docbook.sourceforge.net/release/images/draft.png</xsl:param>
  -->

  <xsl:param name="formal.title.placement">
    figure after
    example after
    equation after
    table after
    procedure after
  </xsl:param>


<!-- ==================================================================== -->

  <xsl:template match="highlights">
    <xsl:call-template name="highlight.block.object" />
  </xsl:template>

  <xsl:template name="highlight.block.object">
    <xsl:variable name="keep.together">
      <xsl:call-template name="pi.dbfo_keep-together"/>
    </xsl:variable>
    <fo:block>
      <xsl:if test="$keep.together != ''">
	<xsl:attribute name="keep-together.within-column"><xsl:value-of
	select="$keep.together"/></xsl:attribute>
      </xsl:if>
      <xsl:call-template name="anchor"/>
      <xsl:call-template name="highlightpara"/>
      <!--      <xsl:apply-templates/> -->
    </fo:block>
  </xsl:template>

  <xsl:template name="highlightpara">
    <xsl:variable name="keep.together">
      <xsl:call-template name="pi.dbfo_keep-together"/>
    </xsl:variable>
    <fo:block xsl:use-attribute-sets="highlight.attribute-set">
      <xsl:if test="$keep.together != ''">
	<xsl:attribute name="keep-together.within-column"><xsl:value-of
	select="$keep.together"/></xsl:attribute>
      </xsl:if>
      <xsl:call-template name="anchor"/>
      <xsl:apply-templates/>
    </fo:block>
  </xsl:template>

  <xsl:template match="abstract/para">
    <fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" space-before="0.5em" text-align="justify" margin-left="0.5in" margin-right="0.5in" font-family="{$body.font.family}" >
      <xsl:apply-templates />
    </fo:block>
  </xsl:template>

  <xsl:attribute-set name="section.title.level1.properties">
    <xsl:attribute name="font-size">
      <xsl:value-of select="$body.font.master * 2.0736"/>
      <xsl:text>pt</xsl:text>
    </xsl:attribute>
    <xsl:attribute name="space-before">1em</xsl:attribute>
  </xsl:attribute-set>

  <xsl:attribute-set name="section.title.level2.properties">
    <xsl:attribute name="font-size">
      <xsl:value-of select="$body.font.master * 1.728"/>
      <xsl:text>pt</xsl:text>
    </xsl:attribute>
    <xsl:attribute name="space-before">0.5em</xsl:attribute>
  </xsl:attribute-set>

  <xsl:attribute-set name="section.title.level3.properties">
    <xsl:attribute name="font-size">
      <xsl:value-of select="$body.font.master * 1.44"/>
      <xsl:text>pt</xsl:text>
    </xsl:attribute>
  </xsl:attribute-set>

  <xsl:attribute-set name="section.title.level4.properties">
    <xsl:attribute name="font-size">
      <xsl:value-of select="$body.font.master * 1.2"/>
      <xsl:text>pt</xsl:text>
    </xsl:attribute>
  </xsl:attribute-set>

  <!--
      <xsl:attribute-set name="toc.margin.properties">
      <xsl:attribute name="break-before">page</xsl:attribute>
      <xsl:attribute name="break-after">page</xsl:attribute>
      </xsl:attribute-set>
  -->

  <!--
  <xsl:template match="title" mode="article.titlepage.recto.auto.mode">
    <fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" xsl:use-attribute-sets="article.titlepage.recto.style" keep-with-next="always" font-size="24.8832pt" font-weight="bold">
      <xsl:call-template name="component.title">
	<xsl:with-param name="node" select="ancestor-or-self::article[1]"/>
      </xsl:call-template>
    </fo:block>
  </xsl:template>


  <xsl:template match="subtitle" mode="article.titlepage.recto.auto.mode">
    <fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" xsl:use-attribute-sets="article.titlepage.recto.style" font-size="16.8832pt" font-weight="bold">
      <xsl:apply-templates select="." mode="article.titlepage.recto.mode"/>
    </fo:block>
  </xsl:template>
  -->

  <xsl:attribute-set name="article.titlepage.recto.style">
    <xsl:attribute name="text-align">center</xsl:attribute>
    <xsl:attribute name="space-before">5em</xsl:attribute>
  </xsl:attribute-set>


  <!-- <?custom-pagebreak?> inserts a page break at this point -->

  <xsl:template match="processing-instruction('custom-pagebreak')">
    <fo:block break-before='page'/>
  </xsl:template>

  <xsl:template match="processing-instruction('linebreak')">
    <fo:block/>
  </xsl:template>

  <!--
      <xsl:template match="section[ @ role='top-level']">
      <fo:block break-before="odd-page"/>
      <xsl:apply-imports/>
      </xsl:template>
  -->

  <xsl:template match="abstract">
    <fo:block break-before="odd-page"/>
    <xsl:apply-imports/>
  </xsl:template>

  <xsl:template match="articleinfo">
    <fo:block break-after="page"/>
    <xsl:apply-imports/>
  </xsl:template>

  <xsl:template name="footer.content">
    <xsl:param name="pageclass" select="''"/>
    <xsl:param name="sequence" select="''"/>
    <xsl:param name="position" select="''"/>
    <xsl:param name="gentext-key" select="''"/>

    <!--
	<fo:block>
	<xsl:value-of select="$pageclass"/>
	<xsl:text>, </xsl:text>
	<xsl:value-of select="$sequence"/>
	<xsl:text>, </xsl:text>
	<xsl:value-of select="$position"/>
	<xsl:text>, </xsl:text>
	<xsl:value-of select="$gentext-key"/>
	</fo:block>
    -->

    <!--
	<xsl:message>In template footer.content</xsl:message>
	<xsl:message>$pageclass=[<xsl:value-of select="$pageclass"/>]</xsl:message>
	<xsl:message>$sequence=[<xsl:value-of select="$sequence"/>]</xsl:message>
	<xsl:message>$position=[<xsl:value-of select="$position"/>]</xsl:message>
	<xsl:message>$gentext-key=[<xsl:value-of select="$gentext-key"/>]</xsl:message>
    -->

    <fo:block>
      <!-- pageclass can be front, body, back -->
      <!-- sequence can be odd, even, first, blank -->
      <!-- position can be left, center, right -->
      <xsl:choose>
	<xsl:when test="$pageclass = 'titlepage'">
	  <!-- nop; no footer on title pages -->
	  <xsl:message>In footer.content/fo:block, pageclass titlepage</xsl:message>
	</xsl:when>

	<xsl:when test="$double.sided != 0 and $sequence = 'first'">
	  <!-- nop; no footer on first page??? -->
	</xsl:when>

	<xsl:when test="$double.sided != 0 and $sequence = 'even'
			and $position='left'">
	  <fo:page-number/>
	</xsl:when>

	<xsl:when test="$double.sided != 0 and ($sequence = 'odd' or $sequence = 'first')
			and $position='right'">
	  <fo:page-number/>
	</xsl:when>

	<xsl:when test="$double.sided = 0 and $position='center'">
	  <fo:page-number/>
	</xsl:when>

	<xsl:when test="$sequence='blank'">
	  <xsl:choose>
	    <xsl:when test="$double.sided != 0 and $position = 'left'">
	      <fo:page-number/>
	    </xsl:when>
	    <xsl:when test="$double.sided = 0 and $position = 'center'">
	      <fo:page-number/>
	    </xsl:when>
	    <xsl:otherwise>
	      <!-- nop -->
	    </xsl:otherwise>
	  </xsl:choose>
	</xsl:when>


	<xsl:otherwise>
	  <!-- nop -->
	</xsl:otherwise>
      </xsl:choose>
    </fo:block>
  </xsl:template>

  <xsl:template match="appendix" mode="object.title.template">
    <xsl:choose>
      <xsl:when test="string($appendix.autolabel) != 0">
	<xsl:call-template name="gentext">
	  <xsl:with-param name="key">appendix</xsl:with-param>
	</xsl:call-template>
	<xsl:text> </xsl:text>
	<xsl:call-template name="gentext.template">
	  <xsl:with-param name="context" select="'title-numbered'"/>
	  <xsl:with-param name="name">
	    <xsl:call-template name="xpath.location"/>
	  </xsl:with-param>
	</xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
	<xsl:call-template name="gentext.template">
	  <xsl:with-param name="context" select="'title-unnumbered'"/>
	  <xsl:with-param name="name">
	    <xsl:call-template name="xpath.location"/>
	  </xsl:with-param>
	</xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- set labels for appendices in the table of contents -->
  <xsl:template name="toc.line">
    <xsl:variable name="id">
      <xsl:call-template name="object.id"/>
    </xsl:variable>

    <xsl:variable name="label">
      <xsl:choose>
	<xsl:when test="self::appendix">
	  <xsl:call-template name="gentext">
	    <xsl:with-param name="key">appendix</xsl:with-param>
	  </xsl:call-template>
	  <xsl:text> </xsl:text>
	  <xsl:apply-templates select="."  mode="label.markup"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:apply-templates select="."  mode="label.markup"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <fo:block text-align-last="justify"
	      text-align="justify"
	      end-indent="{$toc.indent.width}pt"
	      last-line-end-indent="-{$toc.indent.width}pt">
      <fo:inline keep-with-next.within-line="always">
	<fo:basic-link internal-destination="{$id}">
	  <xsl:if test="$label != ''">
	    <xsl:copy-of select="$label"/>
	    <xsl:value-of select="$autotoc.label.separator"/>
	  </xsl:if>
	  <xsl:apply-templates select="." mode="titleabbrev.markup"/>
	</fo:basic-link>
      </fo:inline>
      <fo:inline keep-together.within-line="always">
	<xsl:text> </xsl:text>
	<fo:leader leader-pattern="dots"
		   leader-pattern-width="3pt"
		   leader-alignment="reference-area"
		   keep-with-next.within-line="always"/>
	<xsl:text> </xsl:text>
	<fo:basic-link internal-destination="{$id}">
	  <fo:page-number-citation ref-id="{$id}"/>
	</fo:basic-link>
      </fo:inline>
    </fo:block>
  </xsl:template>

  <xsl:template match="appendix/section" mode="xref-to">
    <xsl:param name="referrer"/>
    <xsl:param name="xrefstyle"/>
    <xsl:param name="verbose" select="1"/>
    <xsl:variable name="poschar">
      <xsl:choose>
	<xsl:when test="count(parent/preceding-sibling::*)+1=1">
	  <xsl:text>A</xsl:text>
	</xsl:when>
	<xsl:when test="count(parent/preceding-sibling::*)+1=2">
	  <xsl:text>B</xsl:text>
	</xsl:when>
	<xsl:when test="count(parent/preceding-sibling::*)+1=3">
	  <xsl:text>C</xsl:text>
	</xsl:when>
	<xsl:when test="count(parent/preceding-sibling::*)+1=4">
	  <xsl:text>D</xsl:text>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:text>???</xsl:text>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:text>Appendix </xsl:text>
    <!--  <xsl:value-of select="count(parent/preceding-sibling::*)+1"/>-->
    <xsl:value-of select="$poschar"/>
    <xsl:text>, </xsl:text>
    <xsl:apply-templates select="." mode="object.xref.markup">
      <xsl:with-param name="purpose" select="'xref'"/>
      <xsl:with-param name="xrefstyle" select="$xrefstyle"/>
      <xsl:with-param name="referrer" select="$referrer"/>
      <xsl:with-param name="verbose" select="$verbose"/>
    </xsl:apply-templates>
    <!-- FIXME: What about "in Chapter X"? -->
  </xsl:template>

<!-- to fix toc, such that first level sections have more space-before
<xsl:template name="toc.s1.line">
  <xsl:param name="toc-context" select="NOTANODE"/>

  <xsl:variable name="id">
    <xsl:call-template name="object.id"/>
  </xsl:variable>

  <xsl:variable name="label">
    <xsl:apply-templates select="." mode="label.markup"/>
  </xsl:variable>

  <fo:block space-before="0.4em" xsl:use-attribute-sets="toc.line.properties">
    <fo:inline keep-with-next.within-line="always">
      <fo:basic-link internal-destination="{$id}">
        <xsl:if test="$label != ''">
          <xsl:copy-of select="$label"/>
          <xsl:value-of select="$autotoc.label.separator"/>
        </xsl:if>
        <xsl:apply-templates select="." mode="titleabbrev.markup"/>
      </fo:basic-link>
    </fo:inline>
    <fo:inline keep-together.within-line="always">
      <xsl:text> </xsl:text>
      <fo:leader leader-pattern="dots"
                 leader-pattern-width="3pt"
                 leader-alignment="reference-area"
                 keep-with-next.within-line="always"/>
      <xsl:text> </xsl:text> 
      <fo:basic-link internal-destination="{$id}">
        <fo:page-number-citation ref-id="{$id}"/>
      </fo:basic-link>
    </fo:inline>
  </fo:block>
</xsl:template>

<xsl:template match="section" mode="toc">
  <xsl:param name="toc-context" select="."/>

  <xsl:variable name="id">
    <xsl:call-template name="object.id"/>
  </xsl:variable>

  <xsl:variable name="cid">
    <xsl:call-template name="object.id">
      <xsl:with-param name="object" select="$toc-context"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="depth" select="count(ancestor::section) + 1"/>
  <xsl:variable name="reldepth"
		select="count(ancestor::*)-count($toc-context/ancestor::*)"/>

  <xsl:variable name="depth.from.context" select="count(ancestor::*)-count($toc-context/ancestor::*)"/>

  <xsl:choose>
    <xsl:when test="$depth=1">
      <xsl:if test="$toc.section.depth &gt;= $depth">
	<xsl:call-template name="toc.s1.line">
	  <xsl:with-param name="toc-context" select="$toc-context"/>
	</xsl:call-template>

	<xsl:if test="$toc.section.depth > $depth 
		      and $toc.max.depth > $depth.from.context
		      and section">
	  <fo:block id="toc.{$cid}.{$id}">
	    <xsl:attribute name="margin-{$direction.align.start}">
	      <xsl:call-template name="set.toc.indent">
		<xsl:with-param name="reldepth" select="$reldepth"/>
	      </xsl:call-template>
	    </xsl:attribute>
	    
	    <xsl:apply-templates select="section|qandaset[$qanda.in.toc != 0]" 
				 mode="toc">
	      <xsl:with-param name="toc-context" select="$toc-context"/>
	    </xsl:apply-templates>
	  </fo:block>
	</xsl:if>
      </xsl:if>
    </xsl:when>
    <xsl:otherwise>
      <xsl:if test="$toc.section.depth &gt;= $depth">
	<xsl:call-template name="toc.line">
	  <xsl:with-param name="toc-context" select="$toc-context"/>
	</xsl:call-template>

	<xsl:if test="$toc.section.depth > $depth 
		      and $toc.max.depth > $depth.from.context
		      and section">
	  <fo:block id="toc.{$cid}.{$id}">
	    <xsl:attribute name="margin-{$direction.align.start}">
	      <xsl:call-template name="set.toc.indent">
		<xsl:with-param name="reldepth" select="$reldepth"/>
	      </xsl:call-template>
	    </xsl:attribute>
	    
	    <xsl:apply-templates select="section|qandaset[$qanda.in.toc != 0]" 
				 mode="toc">
	      <xsl:with-param name="toc-context" select="$toc-context"/>
	    </xsl:apply-templates>
	  </fo:block>
	</xsl:if>
      </xsl:if>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>
-->
</xsl:stylesheet>
